%% Initialization
clear;
close all;
addpath('utils');
addpath('solver');

%% Parameters
% Enhance config
config = struct(...
    'block_size', 8, ...
    'extended_size', 16, ...
    'threshold', 0, ...
    'd', 1, ...
    'mask', 'uniform', ...
    'smooth_filter_size', 3, ...
    'smooth_filter_sigma', 1, ...
    'gabor_filter_size', 17, ...
    'gabor_filter_sigma', 5, ...
    'small_object_size', 25, ...
    'binarize_sensitivity', 0.5, ...
    'prune_length', 15, ...
    'small_branch_size', 10, ...
    'bridge_length', 10, ...
    'bridge_d', 1, ...
    'remove_margin_length', 16, ...
    'debug_enhance', false, ...
    'debug_register', true, ...
    'debug_input', false ...
);

% Register all fingerprint images in 'image/regist'
reg_dir = 'image/regist';
image_files = dir(fullfile(reg_dir, '*.bmp'));
for i = 1:length(image_files)
    % images are named as '1_a.bmp', ...
    % get the corresponding letter, such as 'a'
    letter = image_files(i).name(3);
    % register the image
    register(letter, config);

end
disp('Register finished.');

%% Get the minutiae of all input images
input_dir = 'image/input';
image_files = dir(fullfile(input_dir, '*.bmp'));
for i = 1:length(image_files)
    % images are named as '1.bmp', ...
    % get the corresponding letter, such as 'a'
    if image_files(i).name(1:2) == '10'
        idx = '10';
    else
        idx = image_files(i).name(1);
    end
    % get the minutiae of the image
    get_minu_input(idx, config);
    % save the minutiae
end
disp('input finished.');

%% Match the input images with the registered images
for i = 1:length(image_files)
    % images are named as '1.bmp', ...
    % get the corresponding letter, such as 'a'
    if image_files(i).name(1:2) == '10'
        idx = '10';
    else
        idx = image_files(i).name(1);
    end
    disp(['Matching ' idx '...']);
    % match the image
    letter = match_input(idx);
    disp([num2str(idx) ' -> ' letter]);
end
